name: Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      PROJECT:
        description: 'The project to update'
      VERSION:
        description: 'The new version'
env:
  GH_OWNER: klcodanr
  GROUP_ID: com.danklco.sample
  ARTIFACT_ID: ${GROUP_ID}.infra
jobs:
  versions:
    name: Update Versions
    runs-on: ubuntu-latest
    outputs:
      RELEASE: ${{ steps.date.outputs.date }}
    steps:
    - uses: actions/checkout@v2
    - name: Get Current Release Time
      id: date
      run: echo "::set-output name=date::$(date +'%Y.%m.%d-%H%M')"
    - name: Release Info
      run: echo -e "Starting release ${RELEASE}"
      env:
        RELEASE: ${{ steps.date.outputs.date }}
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Setup Git
      run: |
        git config user.name "Github Actions"
        git config user.email github-actions@github.com
    - name: Get SDK Man
      run: |
        curl -s get.sdkman.io | bash
    - name: Cache Groovy Install
      uses: actions/cache@v1
      with:
        path: ~/.sdkman/candidates/groovy
        key: ${{ runner.os }}-groovy-${{ hashFiles('~/.sdkman/bin/sdkman-init.sh') }}
        restore-keys: |
          ${{ runner.os }}-groovy-
    - name: Install Groovy
      run: |
        source "$HOME/.sdkman/bin/sdkman-init.sh"
        sdk install groovy
        echo "$HOME/.sdkman/candidates/groovy/current/bin" >> $GITHUB_PATH
    - name: Update Project Version
      if: ${{ github.event.inputs.PROJECT }} 
      run: |
        groovy updateVersion.groovy feature/versions.properties ${{ github.event.inputs.PROJECT }} ${{ github.event.inputs.VERSION }}
        git add feature/versions.properties
    - name: Update Compose Version
      run: |
        groovy updateVersion.groovy compose/.env TAG ${RELEASE}
        git add compose/.env
      env:
        RELEASE: ${{ steps.date.outputs.date }}
    - name: Cache Maven Dependencies
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('feature/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Update Maven Version
      run: |
        mvn versions:set -DnewVersion=${RELEASE} --file feature/pom.xml
        git add feature/pom.xml
      env:
        RELEASE: ${{ steps.date.outputs.date }}
    - name: Commit and Tag Release
      run: |
        git commit -m "Updating to track release ${RELEASE}"
        git tag ${RELEASE}
        git push origin main
        git push origin HEAD:main --tags
      env:
        token: ${{ secrets.GH_PAT }}
        RELEASE: ${{ steps.date.outputs.date }}
  feature:
    name: Build Sling Feature Model
    needs: versions
    runs-on: ubuntu-latest
    env:
      RELEASE: ${{needs.versions.outputs.RELEASE}}
    steps:
    - uses: actions/checkout@v2
    - name: Checkout Tag
      run: git fetch --tags && git checkout tags/${RELEASE} -b temp
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - uses: s4u/maven-settings-action@v2.3.0
      with:
        # I don't love the way this works, but this is the least worst way I know
        servers: '[{"id": "github", "username": "${GH_OWNER}", "password": "${{ secrets.GH_PAT }}"},{"id": "github-${GROUP_ID}.app", "username": "${GH_OWNER}", "password": "${{ secrets.GH_PAT }}"}]'
        apacheSnapshots: true
        sonatypeSnapshots: true
    - name: Cache Maven Dependencies
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('feature/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Build with Maven
      run:  mvn -B deploy --file feature/pom.xml
    - name: Upload Features
      uses: actions/upload-artifact@v2
      with:
        name: slingosgifeature
        path: |
          feature/target/slingfeature-tmp/feature-seed.json
          feature/target/slingfeature-tmp/feature-runtime.json
          feature/target/*.far
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: 
      - versions
      - feature
    env:
      RELEASE: ${{needs.versions.outputs.RELEASE}}
    steps:
    - uses: actions/checkout@v2
    - name: Checkout Tag
      run: git fetch --tags && git checkout tags/${RELEASE} -b temp
    - name: Download Features
      uses: actions/download-artifact@v2
      with:
        name: slingosgifeature
        path: images/cms
    - name: Copy Setup
      run: |
        mkdir -p images/cms/slingcms/setup/features
        cp images/cms/*.far images/cms/slingcms/setup/features
        mv images/cms/slingfeature-tmp/feature-seed.json images/cms/slingcms/setup/features
    - name: Copy Runtime
      run: |
        mkdir -p images/cms/runtime
        mv images/cms/*.far images/cms/slingfeature-tmp/feature-runtime.json images/cms/runtime
    - name: Build CMS Image
      run: docker build -t ghcr.io/${GH_OWNER}/${ARTIFACT_ID}.images.cms:${RELEASE} images/cms
    - name: Build Web Image
      run: docker build -t ghcr.io/${GH_OWNER}/${ARTIFACT_ID}.images.web:${RELEASE} images/web
    - name: Login to GHCR
      run: docker login -u ${GH_OWNER} -p ${{ secrets.GH_PAT }} ghcr.io
    - name: Push to CMS GHCR
      run: docker push ghcr.io/${GH_OWNER}/${ARTIFACT_ID}.images.cms:${RELEASE}
    - name: Push to Web GHCR
      run: docker push ghcr.io/${GH_OWNER}/${ARTIFACT_ID}.images.web:${RELEASE}
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: 
      - docker
    steps:
    - name: Update and Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          sudo -- sh -c "echo ${{ secrets.GH_PAT }} >> docker login -u ${GH_OWNER} --password-stdin ghcr.io"
          sudo /etc/init.d/docker-compose-ctl update
          sudo /etc/init.d/docker-compose-ctl status